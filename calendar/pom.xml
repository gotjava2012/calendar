<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.0-SNAPSHOT</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.parsley</groupId>
	<artifactId>calendar</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>calendar</name>
	<description>Calendar app</description>


	<properties>
		<java.version>11</java.version>
		<lombok.version>1.18.12</lombok.version>
		<junit.version>5.1.0</junit.version>
		<javafaker.version>0.17.2</javafaker.version>
		<h2.version>1.4.194</h2.version>
		<spring-boot.version>2.1.3.RELEASE</spring-boot.version>
		<spring-test.version>5.1.5.RELEASE</spring-test.version>
		<postgresql.version>42.2.5</postgresql.version>
		<flyway-core.version>5.2.4</flyway-core.version>
		<jacoco.version>0.8.3</jacoco.version>
		<dockerfile-maven-version>1.4.10</dockerfile-maven-version>
		<!-- utilities -->
		<guava.version>21.0</guava.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>${flyway-core.version}</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.javafaker</groupId>
			<artifactId>javafaker</artifactId>
			<version>${javafaker.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-test</artifactId>
			<version>${spring-boot.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<version>2.2.0.M3</version>
		</dependency>
		<!-- utilities -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>
	</dependencies>

	<build>
<!--		<finalName>${project.artifactId}</finalName>-->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
<!--			<plugin>-->
<!--				<groupId>org.codehaus.mojo</groupId>-->
<!--				<artifactId>exec-maven-plugin</artifactId>-->
<!--				<version>1.6.0</version>-->
<!--				<executions>-->
<!--					&lt;!&ndash; Remove existing image from local repo &ndash;&gt;-->
<!--					<execution>-->
<!--						<id>docker-clean</id>-->
<!--						<phase>install</phase>-->
<!--						<goals>-->
<!--							<goal>exec</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<executable>docker</executable>-->
<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
<!--							<arguments>-->
<!--								<argument>rmi</argument>-->
<!--								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>-->
<!--							</arguments>-->
<!--						</configuration>-->
<!--					</execution>-->

<!--					&lt;!&ndash;-->
<!--                      Create new docker image using Dockerfile which must be present in current working directory.-->
<!--                      Tag the image using maven project version information.-->
<!--                    &ndash;&gt;-->
<!--					<execution>-->
<!--						<id>docker-build</id>-->
<!--						<phase>install</phase>-->
<!--						<goals>-->
<!--							<goal>exec</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<executable>docker</executable>-->
<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
<!--							<arguments>-->
<!--								<argument>build</argument>-->
<!--								<argument>-t</argument>-->
<!--								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>-->
<!--								<argument>.</argument>-->
<!--							</arguments>-->
<!--						</configuration>-->
<!--					</execution>-->

<!--					&lt;!&ndash; Login and Push the image to a docker repo. &ndash;&gt;-->
<!--					<execution>-->
<!--						<id>docker-login</id>-->
<!--						<phase>deploy</phase>-->
<!--						<goals>-->
<!--							<goal>exec</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<executable>docker</executable>-->
<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
<!--							<arguments>-->
<!--								<argument>login</argument>-->
<!--								<argument>-u</argument>-->
<!--								<argument>${docker.user}</argument>-->
<!--								<argument>-p</argument>-->
<!--								<argument>${docker.password}</argument>-->
<!--								<argument>${docker.url}</argument>-->
<!--							</arguments>-->
<!--						</configuration>-->
<!--					</execution>-->
<!--					<execution>-->
<!--						<id>docker-push</id>-->
<!--						<phase>deploy</phase>-->
<!--						<goals>-->
<!--							<goal>exec</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<executable>docker</executable>-->
<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
<!--							<arguments>-->
<!--								<argument>push</argument>-->
<!--								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>-->
<!--							</arguments>-->
<!--						</configuration>-->
<!--					</execution>-->
<!--				</executions>-->
<!--			</plugin>-->

		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</pluginRepository>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

</project>
